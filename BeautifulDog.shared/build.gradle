plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.72'
}
repositories {
    google()
    jcenter()
    mavenCentral()
    maven {
        url  "https://dl.bintray.com/ekito/koin"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'

sqldelight {
    Database { // This will be the name of the generated database class.
        packageName = "com.github.daniilbug.beautifuldog"
    }
}

android {
    compileSdkVersion 28
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    packagingOptions {
        exclude 'META-INF/*'
    }
}

kotlin {
    android("android")
    targets {
        final def iOSTarget = System.getenv("SDK_NAME")?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework()
            }
        }
    }

    def koin_version= "3.0.0-alpha-2"

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')

                implementation "org.koin:koin-core:$koin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.7"

                implementation("io.ktor:ktor-client-core:1.3.2")
                implementation("io.ktor:ktor-client-json:1.3.2")
                implementation("io.ktor:ktor-client-serialization:1.3.2")

                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.20.0")
                implementation "com.squareup.sqldelight:coroutines-extensions:1.2.1"
                implementation "com.squareup.sqldelight:runtime:1.4.0"
                implementation "com.squareup.sqldelight:runtime-metadata:1.1.3"
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')

                implementation "org.koin:koin-android:$koin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2"
                implementation("io.ktor:ktor-client-android:1.3.2")
                implementation("io.ktor:ktor-client-json-jvm:1.3.2")
                implementation("io.ktor:ktor-client-serialization-jvm:1.3.2")

                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0")

                implementation "com.squareup.sqldelight:android-driver:1.4.0"
            }
        }
        iosMain {
            dependencies {
                implementation("com.squareup.sqldelight:native-driver:1.4.0")

                implementation("io.ktor:ktor-client-ios:1.3.2")
                implementation("io.ktor:ktor-client-json-native:1.3.2")
                implementation("io.ktor:ktor-client-serialization-native:1.3.2")

                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.7")
            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
        apiVersion = '1.3'
        languageVersion = '1.3'
    }
}

configurations {
    compileClasspath
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}
